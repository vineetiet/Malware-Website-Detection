from sklearn import metrics
from sklearn.naive_bayes import GaussianNB
from sklearn.cross_validation import train_test_split
from sklearn import cross_validation as crossVal
from sklearn import svm
from sklearn.ensemble import RandomForestClassifier
from sklearn import preprocessing
import pandas


# Method to fetch the Non String columns
def fetchNonStringColumns(columns):
    columnsToKeep = []
    TrainingColumns = []
    for column in columns:
        if column != 'URL' and column != 'host' and column != 'path':
            columnsToKeep.append(column)
            if column != 'malicious' and column != 'result':
                TrainingColumns.append(column)
    return [columnsToKeep, TrainingColumns]


# SVM Classifiers.
def SVMClassfier(trainingSet, query, trainingColumns):
    model = svm.SVC()

    trainingSet[trainingColumns] = preprocessing.scale(trainingSet[trainingColumns])
    query[trainingColumns] = preprocessing.scale(query[trainingColumns])

    x_train, x_test, y_train, y_test = train_test_split(trainingSet[trainingColumns], trainingSet['malicious'], random_state=0)

    model.fit(x_train, y_train)
    scores = crossVal.cross_val_score(model, trainingSet[trainingColumns], trainingSet['malicious'], crossVal=10)
    print('Cross Validated Accuracy SVM:' % (scores.mean()))

    y_pred_class = model.predict(x_test)
    print('Accuracy of SVM',metrics.accuracy_score(y_test, y_pred_class))
    print(metrics.confusion_matrix(y_test, y_pred_class))
    print(metrics.recall_score(y_test, y_pred_class))
    print(metrics.precision_score(y_test, y_pred_class))


# Random Forest Classifier called from UI
def forestClassifierUI(trainingSet, test, trainingColumns):
    model = RandomForestClassifier(n_estimators=150)

    print (model.fit(trainingSet[trainingColumns], trainingSet['malicious']))

    test['result'] = model.predict(test[trainingColumns])
    return test['result']


# Random FOrest Classifier  called from Main.
def RandomforestClassifier(trainingSet, query, trainingColumns):

    results = []
    n_estimator_options = [3, 5, 10, 15, 30, 50, 80, 100, 120, 135, 150]
    for trees in n_estimator_options:


      model = RandomForestClassifier(n_estimators=trees)

      x_train, x_test, y_train, y_test = train_test_split(trainingSet[trainingColumns], trainingSet['malicious'], random_state=0)

      model.fit(x_train, y_train)
      scores = crossVal.cross_val_score(model, trainingSet[trainingColumns], trainingSet['malicious'], crossVal=10)
      mean = scores.mean()
      results.append(mean)
      print('Estimated Random Forest Cross Validated Accuracy' % (scores.mean()))

    y_pred_class = model.predict(x_test)
    print('Accuracy of SVM', metrics.accuracy_score(y_test, y_pred_class))
    print(metrics.confusion_matrix(y_test, y_pred_class))
    print(metrics.recall_score(y_test, y_pred_class))
    print(metrics.precision_score(y_test, y_pred_class))


# Naive Bayes classifier
def naiveBayesClassifier(trainingSet, query, train_cols):
    model = GaussianNB()
    x_train, x_test, y_train, y_test = train_test_split(trainingSet[train_cols], trainingSet['malicious'], random_state=0)


    model.fit(x_train, y_train)
    scores = crossVal.cross_val_score(model, trainingSet[train_cols], trainingSet['malicious'], crossVal=10)

    print('Estimated Cross Validated Accuracy for Navie Bayes' % (scores.mean(), scores.std() / 2))

    y_pred_class = model.predict(x_test)
    print(metrics.confusion_matrix(y_test, y_pred_class))
    print(metrics.recall_score(y_test, y_pred_class))
    print(metrics.precision_score(y_test, y_pred_class))


# Called from Main
def trainClassifier(trainingData, testData):
    csvData = pandas.read_csv(testData)
    print('Query CSV',csvData)

    trainingCSV = pandas.read_csv(trainingData)
    columsToKeep, trainingColumns = fetchNonStringColumns(trainingCSV.columns)

    SVMClassfier(trainingCSV, csvData, trainingColumns)

    RandomforestClassifier(trainingCSV, csvData, trainingColumns)

    naiveBayesClassifier(trainingCSV, csvData, trainingColumns)


#Called from UI
def UI(db, testData):
    csvData = pandas.read_csv(testData)

    TrainingCsv = pandas.read_csv(db)
    columsToKeep, trainingColumns = fetchNonStringColumns(TrainingCsv.columns)

    return forestClassifierUI(TrainingCsv, csvData, trainingColumns)

